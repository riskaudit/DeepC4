function [loss, gradients, xTPprop, xTPpropH, xTPpropW] = ...
    modelLossV2(parameters, ...
                X, ...
                A, ...
                tau, ...
                tauH, ...
                tauW, ...
                btype_label, ...
                label_height, ...
                ind, ...
                gradients_prev ...
                )

    % Pre-process labels
    [   sub_label_roofwall, ...
        sub_label_height, ...
        indtemp, ...
        subtemp, subtempH, ...
        unique_subtemp,unique_subtempH, ...
        nsubtemp, nsubtempH] = ...
        preprocessLabels(btype_label, ...
                         label_height, ...
                         ind);

    % Normalize A
    ANorm = normalizeAdjacency(A);

    % Obtain latent representation
    Z = model(parameters,X,ANorm);

    % Encode clustering constraints
    [   constraints_array, ...
        constraints_array_H, ...
        constraints_array_W] = ...
        encodeConstraints(tau, tauH, tauW, ...
                          subtemp, subtempH, ...
                          nsubtemp, nsubtempH, ...
                          indtemp);

    % Perform MinCostFlow-based constrained clustering
    disp('roof')
    [labelsLocal,centroids] = ...
        constrainedKMeans_DeepGC4(Z(indtemp,1)', ...
        sum(constraints_array(:,3)~=0), ...
        constraints_array(constraints_array(:,3)>0,4), 50);
    disp('height')
    [labelsLocalH,centroidsH] = ...
        constrainedKMeans_DeepGC4(Z(indtemp,2)', ...
        sum(constraints_array_H(:,3)~=0), ...
        constraints_array_H(constraints_array_H(:,3)>0,4), 50);
    disp('wall')
    [labelsLocalW,centroidsW] = ...
        constrainedKMeans_DeepGC4(Z(indtemp,3)', ...
        sum(constraints_array_W(:,3)~=0), ...
        constraints_array_W(constraints_array_W(:,3)>0,4), 50);

    % Compute prediction loss
    [loss] = ...
        computeLoss(...
            Z, indtemp, ...
            constraints_array, ...
            constraints_array_H, ...
            constraints_array_W, ... 
            centroids, ...
            centroidsH, ...
            centroidsW, ...
            subtemp, subtempH, ...
            nsubtemp, nsubtempH, ...
            unique_subtemp, unique_subtempH);

    % Compute metrics
    [xTPprop,xTPpropH,xTPpropW] = ...
        computeMetrics(...
            labelsLocal, ...
            labelsLocalH, ...
            labelsLocalW, ...
            constraints_array_H, constraints_array_W, ...
            subtemp, subtempH, ...
            nsubtemp, nsubtempH);

    % Get gradients
    gradients = dlgradient(loss, parameters);
    if anynan(extractdata(gradients.mult5.Weights)) 
        disp('nan gradient explosion alert')
        gradients = gradients_prev;
    end
 

end

