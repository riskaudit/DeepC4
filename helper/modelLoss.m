function [lossP, lossR, ...
          xTPprop, xTPpropH,xTPpropW, ...
          xTPprop2,xTPpropH2,xTPpropW2, ...
          gradientsE, gradientsD] = ...
                                    modelLoss(netE,netD, ...
                                              X,...
                                              tau,tauH,tauW, ...
                                              btype_label,label_height, ...
                                              ind,...
                                              gradientsE_prev,gradientsD_prev)

    % Pre-process labels
    [   sub_label_roofwall, ...
        sub_label_height, ...
        indtemp, ...
        subtemp, subtempH, ...
        unique_subtemp,unique_subtempH, ...
        nsubtemp, nsubtempH] = ...
        preprocessLabels(btype_label, ...
                         label_height, ...
                         ind);


    % Forward through encoder & decoder
    subZ = forward(netE,X(:,indtemp)+1e-6);
    subY = forward(netD,subZ);

    % Encode clustering constraints
    [   constraints_array, ...
        constraints_array_H, ...
        constraints_array_W] = ...
        encodeConstraints(tau, tauH, tauW, ...
                          subtemp, subtempH, ...
                          nsubtemp, nsubtempH, ...
                          indtemp);

    % Perform clustering
    optCluster = 1; %MinCostFlow
    [   labelsLocal, ...
        labelsLocalH, ...
        labelsLocalW, ...
        centroids, ...
        centroidsH, ...
        centroidsW ...
        ] = clusterLatent(  optCluster, ...
                            subZ, ...
                            constraints_array, ...
                            constraints_array_H, ...
                            constraints_array_W, ...
                            subtemp, ...
                            subtempH);

    % Compute prediction loss
    [lossP] = ...
        computeLoss(...
            subZ, indtemp, ...
            constraints_array, ...
            constraints_array_H, ...
            constraints_array_W, ... 
            centroids, ...
            centroidsH, ...
            centroidsW, ...
            subtemp, subtempH, ...
            nsubtemp, nsubtempH, ...
            unique_subtemp, unique_subtempH);

    % Compute reconstruction Loss
    lossR = rmse(subY,X(:,indtemp)+1e-6,'all');

    % Compute metrics
    [xTPprop,xTPpropH,xTPpropW,xTPprop2,xTPpropH2,xTPpropW2] = ...
        computeMetrics(...
            labelsLocal, ...
            labelsLocalH, ...
            labelsLocalW, ...
            constraints_array_H, constraints_array_W, ...
            subtemp, subtempH, ...
            nsubtemp, nsubtempH);

    % Compute Loss and Gradient Update
    % loss = (loss2 + loss3).*max(nelem)./nind;
    % loss = (loss2./loss2_prev(iter) + loss3./loss3_prev(iter));
    % loss = (loss2./loss2_prev(iter) + loss3./loss3_prev(iter))*max(nelem)./nind; %.*max(nelem)./nind;
    loss = (lossP + lossR);
    % loss = loss3;
     % loss = (loss2./loss2_prev(iter) + loss3./loss3_prev(iter) + loss4./loss4_prev(iter)).*max(nelem)./nind;
    
    [gradientsE,gradientsD] = ...
        dlgradient(dlarray(loss,'BC'),netE.Learnables,netD.Learnables);
    if anynan(extractdata(gradientsE.Value{1,1})) || anynan(extractdata(gradientsD.Value{1,1}))
        disp('nan gradient explosion alert')
        gradientsE = gradientsE_prev;
        gradientsD = gradientsD_prev;
    end

end